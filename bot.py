
import logging
import markup as mar
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.types import InputFile
import datetime
vremya = datetime.datetime.now()

str_vremya = str(vremya)

API_TOKEN = '5710585164:AAEaTFvVDGLiOUegwKha3bQG68iD95QjZCU'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class Questions(StatesGroup):
    name = State()
    phone = State()
    it = State()
    email = State() # —Å—Ç–∞–Ω –¥–ª—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è "–í–∞—à email"
    city = State() # —Å—Ç–∞–Ω –¥–ª—è –∑–∞–ø–∏—Ç–∞–Ω–Ω—è "–ó —è–∫–æ–≥–æ –≤–∏ –º—ñ—Å—Ç–∞?"


@dp.message_handler(commands=['start'])
async def start_cmd_handler(message: types.Message):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∑–∞–ø–∏—Ç–∏.
    """
    await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤—ñ—Ç . –•–æ—á–µ–º–æ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ —Ç–µ–±–µ –±—ñ–ª—å—à–µ, –ø–µ—Ä–µ–¥ —Ç–∏–º —è–∫ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ —É–º–æ–≤–∏ –≤—Å—Ç—É–ø—É')
    await message.reply("–Ø–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?")
    await Questions.name.set()


@dp.message_handler(state=Questions.name)
async def process_name(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è "–í–∞—à–µ –ü–Ü–ë"
    """
    async with state.proxy() as data:
        data['name'] = message.text

    await message.reply("–¶—ñ–∫–∞–≤–∏—à—Å—è –Ü–¢?üßë‚Äçüíª")
    await Questions.it.set()


@dp.message_handler(state=Questions.it)
async def process_phone(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É"
    """
    async with state.proxy() as data:
        data['it'] = message.text

    await message.reply("–ó —è–∫–æ–≥–æ —Ç–∏ –º—ñ—Å—Ç–∞?")
    await Questions.city.set()


@dp.message_handler(state=Questions.city)
async def process_email(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è "–í–∞—à email"
    """
    async with state.proxy() as data:
        data['city'] = message.text

    await message.reply("–©–æ–± –∑–∞–≤–∂–¥–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é —â–æ–¥–æ –≤—Å—Ç—É–ø—É –∑–∞–ª–∏—à —Å–≤—ñ–π –Ω–æ–º–µ—Ä")
    await Questions.phone.set()


@dp.message_handler(state=Questions.phone)
async def process_email(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è "–í–∞—à email"
    """
    async with state.proxy() as data:
        data['phone'] = message.text

    await message.reply("–¢–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É")
    await Questions.email.set()

@dp.message_handler(state=Questions.email)
async def process_email(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–æ–±–Ω–∏–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è "–ó —è–∫–æ–≥–æ –≤–∏ –º—ñ—Å—Ç–∞?"
    """
    async with state.proxy() as data:
        data['email'] = message.text
        user_id = message.from_user.username
        user_id1 = message.from_user.full_name

        await bot.send_message(message.from_user.id, '–û–±–µ—Ä—ñ—Ç—åüëá', reply_markup=mar.mainMenu)
#        await message.reply_document(open('vstup2023.pdf', 'rb'))
#        await bot.send_message(message.from_user.id,'–õ–æ–≤–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—é')

        # –í–∏–≤–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ –∫–æ–Ω—Å–æ–ª—å
        print("************************")
        print(f"–Ü–º'—è: {data['name']}")
        print(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {data['phone']}")
        print(f"–¶—ñ–∫–∞–≤–∏—à—Å—è –Ü–¢: {data['it']}")
        print(f"Email: {data['email']}")
        print(f"–ú—ñ—Å—Ç–æ: {data['city']}")
        print("–ù—ñ–∫ –≤ —Ç–≥ @", user_id)
        print("–Ü–º'—è –≤ —Ç–≥:",user_id1)
        print(vremya)
        print("************************")
        with open("logs.txt", "a") as file:

            file.write("\n")
            file.write(f" {data['name']}")
            file.write(f"; {data['phone']}")
            file.write(f"; {data['it']}")
            file.write(f"; {data['email']}")
            file.write(f"; {data['city']}")
            file.write("; @")
            file.write(user_id)
            file.write("; ")
            file.write(user_id1)
            file.write("; ")
            file.write(str_vremya)
            file.write(" ")
#            file.write("************************")
            file.close()


    await state.finish() # –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤–æ–ø—Ä–æ—Å–æ–≤
@dp.message_handler()
async def bot_message(message: types.Message):
    if message.text=='‚û°Ô∏è–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—è‚¨ÖÔ∏è':
        await message.reply_document(open('vstup2023.pdf', 'rb'))
    elif message.text=='üåê–ö–∞–Ω–∞–ª –í—Å—Ç—É–ø–Ω–∏–∫–∞':
        await bot.send_message(message.from_user.id,'https://t.me/donNTU_vstup_2023')
    elif message.text=='logsss':
        await message.reply_document(open('logs.txt', 'rb'))






if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)